#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para crear presentaci√≥n mejorada sobre Corredores Mineros y Tur√≠sticos
con gr√°ficos, diagramas y emojis profesionales
"""

from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_ALIGN, MSO_ANCHOR
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from io import BytesIO
import os

def crear_presentacion():
    """Crear presentaci√≥n profesional completa"""
    prs = Presentation()
    prs.slide_width = Inches(10)
    prs.slide_height = Inches(7.5)

    # Colores corporativos GIZ
    COLOR_AZUL_GIZ = RGBColor(0, 74, 151)
    COLOR_VERDE_GIZ = RGBColor(0, 135, 104)
    COLOR_NARANJA = RGBColor(255, 127, 39)
    COLOR_GRIS_OSCURO = RGBColor(51, 51, 51)
    COLOR_GRIS_CLARO = RGBColor(240, 240, 240)

    # === DIAPOSITIVA 1: PORTADA ===
    slide = prs.slides.add_slide(prs.slide_layouts[6])  # Blank

    # Fondo azul superior
    shape = slide.shapes.add_shape(
        MSO_SHAPE.RECTANGLE, 0, 0, Inches(10), Inches(3)
    )
    shape.fill.solid()
    shape.fill.fore_color.rgb = COLOR_AZUL_GIZ
    shape.line.fill.background()

    # T√≠tulo principal
    title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.8), Inches(9), Inches(1.5))
    title_frame = title_box.text_frame
    title_frame.word_wrap = True
    p = title_frame.paragraphs[0]
    p.text = "üìä Procesamiento y An√°lisis de Inversiones P√∫blicas"
    p.font.size = Pt(36)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER

    # Subt√≠tulo
    subtitle_box = slide.shapes.add_textbox(Inches(0.5), Inches(2.2), Inches(9), Inches(0.6))
    subtitle_frame = subtitle_box.text_frame
    p = subtitle_frame.paragraphs[0]
    p.text = "Corredores Mineros y Tur√≠sticos Complementarios"
    p.font.size = Pt(24)
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER

    # Informaci√≥n del proyecto
    info_box = slide.shapes.add_textbox(Inches(1.5), Inches(3.5), Inches(7), Inches(3))
    info_frame = info_box.text_frame
    info_frame.word_wrap = True

    info_text = """üèõÔ∏è Programa: Buena Gobernanza Territorial ‚Äì GIZ Per√∫

üë®‚Äçüíº Consultor: Jonatan Silvester Figueroa Gil

üìÖ Periodo: 28 octubre 2025 ‚Äì 16 marzo 2026

üí∞ Valor: S/ 24,500
"""
    p = info_frame.paragraphs[0]
    p.text = info_text
    p.font.size = Pt(18)
    p.font.color.rgb = COLOR_GRIS_OSCURO
    p.alignment = PP_ALIGN.LEFT
    p.space_after = Pt(10)

    # === DIAPOSITIVA 2: AGENDA ===
    slide = crear_slide_titulo(prs, "üìã Agenda de la Reuni√≥n", COLOR_AZUL_GIZ)

    # Contenido
    content_box = slide.shapes.add_textbox(Inches(1), Inches(2), Inches(8), Inches(4.5))
    text_frame = content_box.text_frame
    text_frame.word_wrap = True

    agenda_items = [
        ("1Ô∏è‚É£", "Prop√≥sito de la Reuni√≥n"),
        ("2Ô∏è‚É£", "Contexto del Proyecto"),
        ("3Ô∏è‚É£", "Objetivos General y Espec√≠ficos"),
        ("4Ô∏è‚É£", "Enfoque Metodol√≥gico Integrado"),
        ("5Ô∏è‚É£", "Estructura de Trabajo y Entregables"),
        ("6Ô∏è‚É£", "Cronograma Detallado"),
        ("7Ô∏è‚É£", "Roles y Coordinaci√≥n"),
        ("8Ô∏è‚É£", "Gesti√≥n de Calidad y Datos"),
        ("9Ô∏è‚É£", "Riesgos y Mitigaci√≥n"),
        ("üîü", "Pr√≥ximos Pasos")
    ]

    for emoji, item in agenda_items:
        p = text_frame.add_paragraph()
        p.text = f"{emoji}  {item}"
        p.font.size = Pt(18)
        p.font.color.rgb = COLOR_GRIS_OSCURO
        p.space_before = Pt(6)
        p.space_after = Pt(6)
        p.level = 0

    # === DIAPOSITIVA 3: PROP√ìSITO ===
    slide = crear_slide_titulo(prs, "1Ô∏è‚É£ Prop√≥sito de la Reuni√≥n", COLOR_VERDE_GIZ)

    propositos = [
        ("üéØ", "Alinear objetivos, alcance y resultados",
         "Coordinaci√≥n con GIZ y contrapartes t√©cnicas (MEF, MTC, MINEM, MINCETUR)"),
        ("‚úÖ", "Validar la metodolog√≠a integrada",
         "Enfoque estad√≠stico + geoespacial + econom√©trico"),
        ("üìë", "Aprobar plan de trabajo y cronograma",
         "Definici√≥n de productos P1 y P2 con fechas claras"),
        ("ü§ù", "Establecer gobernanza del proyecto",
         "Canales de comunicaci√≥n y calendario de validaciones")
    ]

    y_pos = 2.2
    for emoji, titulo, detalle in propositos:
        agregar_cuadro_contenido(slide, emoji, titulo, detalle, y_pos, COLOR_VERDE_GIZ)
        y_pos += 1.1

    # === DIAPOSITIVA 4: CONTEXTO ===
    slide = crear_slide_titulo(prs, "2Ô∏è‚É£ Contexto del Proyecto", COLOR_NARANJA)

    # Diagrama de contexto
    crear_diagrama_contexto(slide)

    # === DIAPOSITIVA 5: OBJETIVO GENERAL ===
    slide = crear_slide_titulo(prs, "3Ô∏è‚É£ Objetivo General", COLOR_AZUL_GIZ)

    # Caja destacada para objetivo
    shape = slide.shapes.add_shape(
        MSO_SHAPE.ROUNDED_RECTANGLE,
        Inches(1), Inches(2.5), Inches(8), Inches(2.5)
    )
    shape.fill.solid()
    shape.fill.fore_color.rgb = RGBColor(230, 240, 255)
    shape.line.color.rgb = COLOR_AZUL_GIZ
    shape.line.width = Pt(3)

    text_frame = shape.text_frame
    text_frame.word_wrap = True
    text_frame.margin_top = Inches(0.2)
    text_frame.margin_left = Inches(0.3)
    text_frame.margin_right = Inches(0.3)

    p = text_frame.paragraphs[0]
    p.text = "üéØ OBJETIVO GENERAL"
    p.font.size = Pt(24)
    p.font.bold = True
    p.font.color.rgb = COLOR_AZUL_GIZ
    p.alignment = PP_ALIGN.CENTER
    p.space_after = Pt(15)

    p = text_frame.add_paragraph()
    p.text = "Elaborar un an√°lisis estad√≠stico y geoespacial que permita identificar corredores mineros y tur√≠sticos complementarios a los del MTC, mediante rutinas reproducibles de procesamiento de datos y criterios de competitividad territorial."
    p.font.size = Pt(18)
    p.font.color.rgb = COLOR_GRIS_OSCURO
    p.alignment = PP_ALIGN.CENTER
    p.line_spacing = 1.3

    # === DIAPOSITIVA 6: OBJETIVOS ESPEC√çFICOS ===
    slide = crear_slide_titulo(prs, "4Ô∏è‚É£ Objetivos Espec√≠ficos", COLOR_VERDE_GIZ)

    objetivos_esp = [
        ("üìä", "Recopilar, depurar y estandarizar bases estad√≠sticas, econ√≥micas y geoespaciales"),
        ("üìê", "Definir criterios metodol√≥gicos para priorizaci√≥n de corredores"),
        ("üîç", "Evaluar potencial de aglomeraci√≥n y atracci√≥n de capital privado"),
        ("üíª", "Desarrollar algoritmos reproducibles (Python/R)"),
        ("üó∫Ô∏è", "Elaborar mapas SIG y visualizaciones interactivas")
    ]

    y_pos = 2.2
    for emoji, objetivo in objetivos_esp:
        shape = slide.shapes.add_shape(
            MSO_SHAPE.ROUNDED_RECTANGLE,
            Inches(1.5), Inches(y_pos), Inches(7), Inches(0.7)
        )
        shape.fill.solid()
        shape.fill.fore_color.rgb = COLOR_GRIS_CLARO
        shape.line.color.rgb = COLOR_VERDE_GIZ
        shape.line.width = Pt(2)

        text_frame = shape.text_frame
        text_frame.word_wrap = True
        text_frame.margin_top = Inches(0.1)
        text_frame.margin_left = Inches(0.2)

        p = text_frame.paragraphs[0]
        p.text = f"{emoji}  {objetivo}"
        p.font.size = Pt(16)
        p.font.color.rgb = COLOR_GRIS_OSCURO
        p.alignment = PP_ALIGN.LEFT

        y_pos += 0.85

    # === DIAPOSITIVA 7: ENFOQUE METODOL√ìGICO (TABLA) ===
    slide = crear_slide_titulo(prs, "5Ô∏è‚É£ Enfoque Metodol√≥gico Integrado", COLOR_NARANJA)

    # Crear tabla
    rows, cols = 5, 3
    left = Inches(0.5)
    top = Inches(2.2)
    width = Inches(9)
    height = Inches(4.5)

    table = slide.shapes.add_table(rows, cols, left, top, width, height).table

    # Configurar anchos de columna
    table.columns[0].width = Inches(2.2)
    table.columns[1].width = Inches(3.8)
    table.columns[2].width = Inches(3)

    # Encabezados
    headers = ["üìã Componente", "üîß Metodolog√≠a / Herramienta", "üéØ Resultado Esperado"]
    for i, header in enumerate(headers):
        cell = table.rows[0].cells[i]
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = COLOR_NARANJA
        paragraph = cell.text_frame.paragraphs[0]
        paragraph.font.size = Pt(12)
        paragraph.font.bold = True
        paragraph.font.color.rgb = RGBColor(255, 255, 255)
        paragraph.alignment = PP_ALIGN.CENTER

    # Datos
    data = [
        ["üìà Estad√≠stico-econom√©trico",
         "Normalizaci√≥n, correlaciones, K-means/DBSCAN, √≠ndices compuestos (IPC)",
         "Identificaci√≥n de tipolog√≠as de corredores"],
        ["üó∫Ô∏è Geoespacial",
         "Buffers 5 km, accesibilidad, LISA/Moran's I, mapas SIG",
         "Mapas tem√°ticos y capas priorizadas"],
        ["üíæ Datos y reproducibilidad",
         "Pipeline ETL, control QA, versi√≥n Git, metadata",
         "Repositorio digital reproducible"],
        ["‚öñÔ∏è Transversalizaci√≥n",
         "G√©nero e interculturalidad ‚Äì criterios transformadores",
         "Indicadores desagregados por territorio"]
    ]

    for i, row_data in enumerate(data, start=1):
        for j, cell_text in enumerate(row_data):
            cell = table.rows[i].cells[j]
            cell.text = cell_text
            cell.fill.solid()
            cell.fill.fore_color.rgb = RGBColor(250, 250, 250) if i % 2 == 0 else RGBColor(255, 255, 255)
            paragraph = cell.text_frame.paragraphs[0]
            paragraph.font.size = Pt(10)
            paragraph.font.color.rgb = COLOR_GRIS_OSCURO
            paragraph.alignment = PP_ALIGN.LEFT
            cell.text_frame.word_wrap = True

    # === DIAPOSITIVA 8: ENTREGABLES ===
    slide = crear_slide_titulo(prs, "6Ô∏è‚É£ Estructura de Trabajo y Entregables", COLOR_AZUL_GIZ)

    # Timeline visual
    crear_timeline_entregables(slide)

    # === DIAPOSITIVA 9: CRONOGRAMA DETALLADO ===
    slide = crear_slide_titulo(prs, "7Ô∏è‚É£ Cronograma Detallado de Actividades", COLOR_VERDE_GIZ)

    # Crear tabla de cronograma
    rows, cols = 5, 3
    left = Inches(0.5)
    top = Inches(2.2)
    width = Inches(9)
    height = Inches(4.8)

    table = slide.shapes.add_table(rows, cols, left, top, width, height).table

    # Configurar anchos
    table.columns[0].width = Inches(2)
    table.columns[1].width = Inches(4.5)
    table.columns[2].width = Inches(2.5)

    # Encabezados
    headers = ["üìÖ Fase", "üìã Actividades Principales", "üéØ Producto/Resultado"]
    for i, header in enumerate(headers):
        cell = table.rows[0].cells[i]
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = COLOR_VERDE_GIZ
        paragraph = cell.text_frame.paragraphs[0]
        paragraph.font.size = Pt(12)
        paragraph.font.bold = True
        paragraph.font.color.rgb = RGBColor(255, 255, 255)
        paragraph.alignment = PP_ALIGN.CENTER

    # Datos del cronograma
    cronograma_data = [
        ["F1 ‚Äì Inicio\n28 oct-17 nov",
         "‚Ä¢ Kick-off con contrapartes\n‚Ä¢ Inventario de bases\n‚Ä¢ Dise√±o metadata y Git\n‚Ä¢ Criterios de priorizaci√≥n\n‚Ä¢ Rutinas ETL y QA",
         "üìÑ Producto 1\nPlan de trabajo"],
        ["F2 ‚Äì Procesamiento\nnov-dic 2025",
         "‚Ä¢ Depuraci√≥n de bases\n‚Ä¢ Indicadores productividad\n‚Ä¢ Modelos econom√©tricos\n‚Ä¢ Clusterizaci√≥n\n‚Ä¢ C√°lculo IPC y mapas SIG",
         "üìä Resultados intermedios y mapas"],
        ["F3 ‚Äì Validaci√≥n\nene 2026",
         "‚Ä¢ Validaci√≥n interna GIZ\n‚Ä¢ Taller t√©cnico sectorial\n‚Ä¢ Ajustes metodol√≥gicos\n‚Ä¢ Definici√≥n corredores priorizados",
         "üìÑ Producto 2\nInforme Final preliminar"],
        ["F4 ‚Äì Cierre\nfeb-mar 2026",
         "‚Ä¢ Consolidaci√≥n base final\n‚Ä¢ Repositorio digital\n‚Ä¢ Manual de uso\n‚Ä¢ Lecciones aprendidas",
         "‚úÖ Informe de cierre y transferencia"]
    ]

    for i, row_data in enumerate(cronograma_data, start=1):
        for j, cell_text in enumerate(row_data):
            cell = table.rows[i].cells[j]
            cell.text = cell_text
            cell.fill.solid()
            colores_fila = [
                RGBColor(230, 240, 255),
                RGBColor(230, 250, 240),
                RGBColor(255, 245, 230),
                RGBColor(240, 230, 255)
            ]
            cell.fill.fore_color.rgb = colores_fila[i-1]
            paragraph = cell.text_frame.paragraphs[0]
            paragraph.font.size = Pt(9)
            paragraph.font.color.rgb = COLOR_GRIS_OSCURO
            paragraph.alignment = PP_ALIGN.LEFT
            cell.text_frame.word_wrap = True
            cell.text_frame.margin_top = Inches(0.05)
            cell.text_frame.margin_left = Inches(0.1)

    # === DIAPOSITIVA 10: ROLES Y COORDINACI√ìN ===
    slide = crear_slide_titulo(prs, "8Ô∏è‚É£ Roles y Coordinaci√≥n", COLOR_NARANJA)

    roles = [
        ("üè¢ GIZ ‚Äì Proyecto BGT", "Supervisi√≥n t√©cnica y validaci√≥n de productos (Jessica Ocsas)"),
        ("üë®‚Äçüíº Consultor (J. Figueroa)", "Dise√±o metodol√≥gico, procesamiento, an√°lisis y coordinaci√≥n t√©cnica"),
        ("üèõÔ∏è MEF / MTC / MINEM / MINCETUR", "Contrapartes sectoriales ‚Äì validaci√≥n t√©cnica y acceso a bases"),
        ("üåé GORE y actores regionales", "Validaci√≥n territorial de corredores priorizados")
    ]

    y_pos = 2.3
    for emoji, descripcion in roles:
        shape = slide.shapes.add_shape(
            MSO_SHAPE.ROUNDED_RECTANGLE,
            Inches(1), Inches(y_pos), Inches(8), Inches(0.9)
        )
        shape.fill.solid()
        shape.fill.fore_color.rgb = RGBColor(255, 250, 240)
        shape.line.color.rgb = COLOR_NARANJA
        shape.line.width = Pt(2)

        text_frame = shape.text_frame
        text_frame.word_wrap = True
        text_frame.margin_top = Inches(0.15)
        text_frame.margin_left = Inches(0.2)

        p = text_frame.paragraphs[0]
        p.text = emoji
        p.font.size = Pt(18)
        p.font.bold = True

        p = text_frame.add_paragraph()
        p.text = descripcion
        p.font.size = Pt(14)
        p.font.color.rgb = COLOR_GRIS_OSCURO
        p.line_spacing = 1.2

        y_pos += 1.05

    # === DIAPOSITIVA 11: GESTI√ìN DE CALIDAD ===
    slide = crear_slide_titulo(prs, "9Ô∏è‚É£ Gesti√≥n de Calidad y Datos", COLOR_AZUL_GIZ)

    calidad_items = [
        ("üìã", "Plan de Gesti√≥n de Datos (PGD)",
         "Confidencialidad, backup, versionado y control de calidad"),
        ("‚úÖ", "Control de Calidad Metodol√≥gico",
         "Validaci√≥n cruzada de indicadores y mapas"),
        ("üì¶", "Conservaci√≥n Documental",
         "Resguardo por 10 a√±os conforme a CCG locales GIZ"),
        ("¬©Ô∏è", "Propiedad Intelectual",
         "Derechos de autor cedidos a GIZ")
    ]

    y_pos = 2.3
    for emoji, titulo, detalle in calidad_items:
        agregar_cuadro_contenido(slide, emoji, titulo, detalle, y_pos, COLOR_AZUL_GIZ)
        y_pos += 1.15

    # === DIAPOSITIVA 12: RIESGOS Y MITIGACI√ìN ===
    slide = crear_slide_titulo(prs, "üîü Riesgos y Mitigaci√≥n", COLOR_VERDE_GIZ)

    # Crear tabla de riesgos
    rows, cols = 5, 2
    left = Inches(0.8)
    top = Inches(2.2)
    width = Inches(8.4)
    height = Inches(4.5)

    table = slide.shapes.add_table(rows, cols, left, top, width, height).table

    # Configurar anchos
    table.columns[0].width = Inches(4)
    table.columns[1].width = Inches(4.4)

    # Encabezados
    headers = ["‚ö†Ô∏è Riesgo", "üõ°Ô∏è Estrategia de Mitigaci√≥n"]
    for i, header in enumerate(headers):
        cell = table.rows[0].cells[i]
        cell.text = header
        cell.fill.solid()
        cell.fill.fore_color.rgb = COLOR_VERDE_GIZ
        paragraph = cell.text_frame.paragraphs[0]
        paragraph.font.size = Pt(13)
        paragraph.font.bold = True
        paragraph.font.color.rgb = RGBColor(255, 255, 255)
        paragraph.alignment = PP_ALIGN.CENTER

    # Datos de riesgos
    riesgos_data = [
        ["Retrasos en acceso a datos oficiales",
         "Plan de contingencia con fuentes alternativas (INEI, Open Data MEF)"],
        ["Inconsistencias de informaci√≥n territorial",
         "QA autom√°tico + verificaci√≥n manual regional"],
        ["Cambios metodol√≥gicos por contrapartes",
         "Comit√© t√©cnico quincenal para aprobaci√≥n de ajustes"],
        ["Eventos de fuerza mayor (bioseguridad)",
         "Aplicaci√≥n de cl√°usulas CCG y ajuste de plazos"]
    ]

    for i, row_data in enumerate(riesgos_data, start=1):
        for j, cell_text in enumerate(row_data):
            cell = table.rows[i].cells[j]
            cell.text = cell_text
            cell.fill.solid()
            if j == 0:
                cell.fill.fore_color.rgb = RGBColor(255, 240, 240)
            else:
                cell.fill.fore_color.rgb = RGBColor(240, 255, 240)
            paragraph = cell.text_frame.paragraphs[0]
            paragraph.font.size = Pt(11)
            paragraph.font.color.rgb = COLOR_GRIS_OSCURO
            paragraph.alignment = PP_ALIGN.LEFT
            cell.text_frame.word_wrap = True
            cell.text_frame.margin_top = Inches(0.1)
            cell.text_frame.margin_left = Inches(0.15)

    # === DIAPOSITIVA 13: PR√ìXIMOS PASOS ===
    slide = crear_slide_titulo(prs, "1Ô∏è‚É£1Ô∏è‚É£ Pr√≥ximos Pasos", COLOR_NARANJA)

    pasos = [
        ("üìÖ 17 nov 2025", "Validar el Plan de Trabajo (P1)"),
        ("üíæ", "Configurar repositorio reproducible y diccionario de datos"),
        ("üë• Enero 2026", "Planificar taller t√©cnico de validaci√≥n con contrapartes"),
        ("üìÑ 30 ene 2026", "Entregar Informe Final (P2)"),
        ("‚úÖ 16 mar 2026", "Cierre contractual y liquidaci√≥n")
    ]

    y_pos = 2.3
    for i, (emoji, paso) in enumerate(pasos):
        # N√∫mero de paso
        num_box = slide.shapes.add_shape(
            MSO_SHAPE.OVAL,
            Inches(1.2), Inches(y_pos), Inches(0.4), Inches(0.4)
        )
        num_box.fill.solid()
        num_box.fill.fore_color.rgb = COLOR_NARANJA
        num_box.line.fill.background()

        num_frame = num_box.text_frame
        num_frame.text = str(i+1)
        num_frame.paragraphs[0].font.size = Pt(16)
        num_frame.paragraphs[0].font.bold = True
        num_frame.paragraphs[0].font.color.rgb = RGBColor(255, 255, 255)
        num_frame.paragraphs[0].alignment = PP_ALIGN.CENTER
        num_frame.vertical_anchor = MSO_ANCHOR.MIDDLE

        # Contenido del paso
        shape = slide.shapes.add_shape(
            MSO_SHAPE.ROUNDED_RECTANGLE,
            Inches(1.8), Inches(y_pos-0.05), Inches(7), Inches(0.5)
        )
        shape.fill.solid()
        shape.fill.fore_color.rgb = RGBColor(255, 250, 240)
        shape.line.color.rgb = COLOR_NARANJA
        shape.line.width = Pt(1.5)

        text_frame = shape.text_frame
        text_frame.word_wrap = True
        text_frame.margin_left = Inches(0.15)
        text_frame.vertical_anchor = MSO_ANCHOR.MIDDLE

        p = text_frame.paragraphs[0]
        p.text = f"{emoji}  {paso}"
        p.font.size = Pt(14)
        p.font.color.rgb = COLOR_GRIS_OSCURO

        y_pos += 0.75

    # === DIAPOSITIVA 14: CIERRE ===
    slide = crear_slide_cierre(prs, COLOR_AZUL_GIZ)

    # Guardar presentaci√≥n
    output_path = '/home/user/giz/Presentacion_Corredores_Mineros_Turisticos_MEJORADA.pptx'
    prs.save(output_path)
    print(f"‚úÖ Presentaci√≥n creada exitosamente: {output_path}")
    return output_path

def crear_slide_titulo(prs, titulo, color):
    """Crear slide con t√≠tulo estilizado"""
    slide = prs.slides.add_slide(prs.slide_layouts[6])

    # Barra superior de color
    shape = slide.shapes.add_shape(
        MSO_SHAPE.RECTANGLE, 0, 0, Inches(10), Inches(1.2)
    )
    shape.fill.solid()
    shape.fill.fore_color.rgb = color
    shape.line.fill.background()

    # T√≠tulo
    title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(9), Inches(0.8))
    title_frame = title_box.text_frame
    p = title_frame.paragraphs[0]
    p.text = titulo
    p.font.size = Pt(32)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.LEFT

    return slide

def agregar_cuadro_contenido(slide, emoji, titulo, detalle, y_pos, color):
    """Agregar cuadro de contenido con emoji"""
    shape = slide.shapes.add_shape(
        MSO_SHAPE.ROUNDED_RECTANGLE,
        Inches(1.5), Inches(y_pos), Inches(7), Inches(0.9)
    )
    shape.fill.solid()
    shape.fill.fore_color.rgb = RGBColor(250, 250, 250)
    shape.line.color.rgb = color
    shape.line.width = Pt(2)

    text_frame = shape.text_frame
    text_frame.word_wrap = True
    text_frame.margin_top = Inches(0.1)
    text_frame.margin_left = Inches(0.2)

    p = text_frame.paragraphs[0]
    p.text = f"{emoji}  {titulo}"
    p.font.size = Pt(16)
    p.font.bold = True
    p.font.color.rgb = color

    p = text_frame.add_paragraph()
    p.text = detalle
    p.font.size = Pt(13)
    p.font.color.rgb = RGBColor(51, 51, 51)
    p.line_spacing = 1.1

def crear_diagrama_contexto(slide):
    """Crear diagrama visual del contexto"""
    COLOR_AZUL = RGBColor(0, 74, 151)
    COLOR_VERDE = RGBColor(0, 135, 104)
    COLOR_NARANJA = RGBColor(255, 127, 39)

    # Cuadros de contexto
    contextos = [
        (2, 2.5, "‚ö†Ô∏è SITUACI√ìN ACTUAL",
         "Inversi√≥n p√∫blica priorizada\npor brechas b√°sicas sin\nenfoque territorial",
         RGBColor(255, 230, 230)),
        (5.5, 2.5, "üõ£Ô∏è AVANCE MTC",
         "Definici√≥n de corredores\nlog√≠sticos nacionales",
         RGBColor(230, 245, 255)),
        (2, 4.5, "üéØ NECESIDAD",
         "Identificar corredores\nmineros y tur√≠sticos\ncomplementarios",
         RGBColor(255, 245, 230)),
        (5.5, 4.5, "üíº OBJETIVO",
         "Atraer inversi√≥n privada\ny articular desarrollo\nregional",
         RGBColor(230, 255, 230))
    ]

    for x, y, titulo, texto, color_fondo in contextos:
        shape = slide.shapes.add_shape(
            MSO_SHAPE.ROUNDED_RECTANGLE,
            Inches(x), Inches(y), Inches(3), Inches(1.5)
        )
        shape.fill.solid()
        shape.fill.fore_color.rgb = color_fondo
        shape.line.color.rgb = COLOR_AZUL
        shape.line.width = Pt(2)

        text_frame = shape.text_frame
        text_frame.word_wrap = True
        text_frame.margin_top = Inches(0.1)

        p = text_frame.paragraphs[0]
        p.text = titulo
        p.font.size = Pt(13)
        p.font.bold = True
        p.font.color.rgb = COLOR_AZUL
        p.alignment = PP_ALIGN.CENTER

        p = text_frame.add_paragraph()
        p.text = texto
        p.font.size = Pt(11)
        p.font.color.rgb = RGBColor(51, 51, 51)
        p.alignment = PP_ALIGN.CENTER
        p.line_spacing = 1.2

    # Flechas de conexi√≥n
    # Flecha 1: Situaci√≥n -> Necesidad
    agregar_flecha(slide, 3.5, 3.9, 3.5, 4.5, COLOR_NARANJA)

    # Flecha 2: Avance -> Objetivo
    agregar_flecha(slide, 7, 3.9, 7, 4.5, COLOR_VERDE)

def agregar_flecha(slide, x1, y1, x2, y2, color):
    """Agregar flecha entre dos puntos"""
    connector = slide.shapes.add_connector(
        1, Inches(x1), Inches(y1), Inches(x2), Inches(y2)
    )
    connector.line.color.rgb = color
    connector.line.width = Pt(3)

def crear_timeline_entregables(slide):
    """Crear timeline visual de entregables"""
    COLOR_AZUL = RGBColor(0, 74, 151)
    COLOR_VERDE = RGBColor(0, 135, 104)
    COLOR_NARANJA = RGBColor(255, 127, 39)

    # L√≠nea de tiempo base
    slide.shapes.add_connector(
        1, Inches(1.5), Inches(4), Inches(8.5), Inches(4)
    ).line.color.rgb = RGBColor(150, 150, 150)

    # Entregables
    entregables = [
        (2, "üìÑ P1", "Plan de Trabajo\ny Avance Inicial", "17 nov 2025", COLOR_VERDE),
        (5, "üìä P2", "Informe Final\nCompleto", "30 ene 2026", COLOR_AZUL),
        (8, "‚úÖ", "Cierre\nContractual", "16 mar 2026", COLOR_NARANJA)
    ]

    for x, emoji, titulo, fecha, color in entregables:
        # C√≠rculo en timeline
        circle = slide.shapes.add_shape(
            MSO_SHAPE.OVAL,
            Inches(x-0.2), Inches(3.8), Inches(0.4), Inches(0.4)
        )
        circle.fill.solid()
        circle.fill.fore_color.rgb = color
        circle.line.fill.background()

        # Cuadro de informaci√≥n arriba
        info_box = slide.shapes.add_shape(
            MSO_SHAPE.ROUNDED_RECTANGLE,
            Inches(x-0.8), Inches(2.2), Inches(1.6), Inches(1.3)
        )
        info_box.fill.solid()
        info_box.fill.fore_color.rgb = RGBColor(250, 250, 250)
        info_box.line.color.rgb = color
        info_box.line.width = Pt(2)

        text_frame = info_box.text_frame
        text_frame.word_wrap = True

        p = text_frame.paragraphs[0]
        p.text = emoji
        p.font.size = Pt(24)
        p.alignment = PP_ALIGN.CENTER

        p = text_frame.add_paragraph()
        p.text = titulo
        p.font.size = Pt(11)
        p.font.bold = True
        p.font.color.rgb = color
        p.alignment = PP_ALIGN.CENTER
        p.line_spacing = 1.1

        # Fecha abajo
        fecha_box = slide.shapes.add_textbox(
            Inches(x-0.8), Inches(4.5), Inches(1.6), Inches(0.4)
        )
        fecha_frame = fecha_box.text_frame
        p = fecha_frame.paragraphs[0]
        p.text = fecha
        p.font.size = Pt(10)
        p.font.color.rgb = RGBColor(100, 100, 100)
        p.alignment = PP_ALIGN.CENTER

    # Informaci√≥n de valor
    valor_box = slide.shapes.add_shape(
        MSO_SHAPE.ROUNDED_RECTANGLE,
        Inches(3), Inches(5.5), Inches(4), Inches(0.8)
    )
    valor_box.fill.solid()
    valor_box.fill.fore_color.rgb = RGBColor(230, 255, 230)
    valor_box.line.color.rgb = COLOR_VERDE
    valor_box.line.width = Pt(2)

    text_frame = valor_box.text_frame
    p = text_frame.paragraphs[0]
    p.text = "üí∞ Valor Total del Contrato: S/ 24,500"
    p.font.size = Pt(18)
    p.font.bold = True
    p.font.color.rgb = COLOR_VERDE
    p.alignment = PP_ALIGN.CENTER
    text_frame.vertical_anchor = MSO_ANCHOR.MIDDLE

def crear_slide_cierre(prs, color):
    """Crear slide de cierre con mensaje final"""
    slide = prs.slides.add_slide(prs.slide_layouts[6])

    # Fondo degradado simulado con rect√°ngulos
    shape = slide.shapes.add_shape(
        MSO_SHAPE.RECTANGLE, 0, 0, Inches(10), Inches(7.5)
    )
    shape.fill.solid()
    shape.fill.fore_color.rgb = color
    shape.line.fill.background()

    # Caja central con mensaje
    mensaje_box = slide.shapes.add_shape(
        MSO_SHAPE.ROUNDED_RECTANGLE,
        Inches(1), Inches(2), Inches(8), Inches(3.5)
    )
    mensaje_box.fill.solid()
    mensaje_box.fill.fore_color.rgb = RGBColor(255, 255, 255)
    mensaje_box.line.fill.background()

    text_frame = mensaje_box.text_frame
    text_frame.word_wrap = True
    text_frame.margin_top = Inches(0.3)
    text_frame.margin_left = Inches(0.4)
    text_frame.margin_right = Inches(0.4)

    p = text_frame.paragraphs[0]
    p.text = "1Ô∏è‚É£2Ô∏è‚É£ Cierre del Kick-off"
    p.font.size = Pt(28)
    p.font.bold = True
    p.font.color.rgb = color
    p.alignment = PP_ALIGN.CENTER
    p.space_after = Pt(20)

    p = text_frame.add_paragraph()
    mensaje = """üéØ Este proyecto permitir√° a la GIZ y al MEF contar con evidencia estad√≠stica y geoespacial de alta calidad para orientar las inversiones p√∫blicas hacia territorios con mayor potencial productivo y tur√≠stico, garantizando transparencia, reproducibilidad y enfoque territorial."""
    p.text = mensaje
    p.font.size = Pt(16)
    p.font.color.rgb = RGBColor(51, 51, 51)
    p.alignment = PP_ALIGN.CENTER
    p.line_spacing = 1.4

    # Mensaje de agradecimiento
    gracias_box = slide.shapes.add_textbox(Inches(2), Inches(6), Inches(6), Inches(0.8))
    gracias_frame = gracias_box.text_frame
    p = gracias_frame.paragraphs[0]
    p.text = "¬°Gracias por su atenci√≥n! ü§ù"
    p.font.size = Pt(24)
    p.font.bold = True
    p.font.color.rgb = RGBColor(255, 255, 255)
    p.alignment = PP_ALIGN.CENTER

    return slide

if __name__ == "__main__":
    print("üöÄ Iniciando creaci√≥n de presentaci√≥n mejorada...")
    crear_presentacion()
    print("‚ú® ¬°Proceso completado!")
